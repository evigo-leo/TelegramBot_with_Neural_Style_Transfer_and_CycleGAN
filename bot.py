import io
import logging
from math import sqrt

import aiohttp
import torch
from PIL import Image
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types.message import ContentType
from aiogram.utils.markdown import text
from torchvision.transforms import transforms

from config import TOKEN
from cyclegan import Generator, device
from keyboards import menu, cancel_button, continue_button1, continue_button2
from nst import run_style_transfer, cnn, cnn_normalization_mean, cnn_normalization_std
from states import PhotoTransform

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize bot and dispatcher
bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –∫–ª–∞—Å—Å–∞ Generator
gen = Generator().to(device)

# –í—ã–±–æ—Ä GPU –∏–ª–∏ CPU
if torch.cuda.is_available():
    map_location = lambda storage, loc: storage.cuda()
else:
    map_location = 'cpu'

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–µ—Ä–µ–Ω—Å-—Ä–µ–∂–∏–º
gen.load_state_dict(torch.load('weights/netG_B2A.pth', map_location=map_location))
gen.eval()


""" –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´ /"""

@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    """
    –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –∫–æ–º–∞–Ω–¥—ã `/start`
    """
    if message:
        await message.answer('–í—ã–±–µ—Ä–∏ —Ñ–∏—á—É –∏ –∫–∏–¥–∞–π –ø–∏–∫—á—É!üòä\n'
                             '–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /info\n', reply_markup=menu)


@dp.message_handler(commands=['info'])
async def process_help_command(message: types.Message):
    """
    –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –∫–æ–º–∞–Ω–¥—ã `/info`
    """
    await message.reply(
        "CUSTOM - –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Å—Ç–∏–ª—å/—Ç–µ–∫—Å—Ç—É—Ä—ã/—Ü–≤–µ—Ç–æ–≤—É—é –≥–∞–º–º—É –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–≥–æ—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç-—Ñ–æ—Ç–æ.\n\n"
        # "–ö–æ–º–∞–Ω–¥–∞ /NST.\n\n"
        "Paul C√©zanne - –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ç–æ –≤ –∂–∏–≤–æ–ø–∏—Å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω—É –≤ —Å—Ç–∏–ª–µ –ü–æ–ª—è –°–µ–∑–∞–Ω–Ω–∞.\n\n"
        # "–ö–æ–º–∞–Ω–¥–∞ /CycleGAN.\n\n"
        "–ö–æ–Ω—Ç–µ–Ω—Ç-—Ñ–æ—Ç–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—é 256*256 —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ —Å—Ç–æ—Ä–æ–Ω.\n\n"
        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")

""" –†–ê–ë–†–û–¢–ê –° –ò–ù–õ–ê–ô–ù-–ö–õ–ê–í–ò–ê–¢–£–†–û–ô"""

# –•–µ–Ω–¥–ª–µ—Ä CallbackQuery –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏/–∫–Ω–æ–ø–∫–∞–º–∏
@dp.callback_query_handler(lambda c: c.data[0] == 'b')     # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ø–∞–¥–∞–Ω–∏–µ –ø–æ 1-–º—É —Å–∏–º–≤–æ–ª—É –∏–∑ 3-—Ö callback_data
async def process_callback_keyboard(callback_query: types.CallbackQuery):

    mode_code = callback_query.data[1]                # 2–π —Å–∏–º–≤–æ–ª –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∂–∏–º
    continuation_mode = callback_query.data[-1]       # 3–π - –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ

    if mode_code == '1':  # –æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ NST
        if continuation_mode == '0':
            await bot.answer_callback_query(callback_query.id, text='–†–µ–∂–∏–º CUSTOM –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!‚úÖ', show_alert=True)
        await bot.send_message(callback_query.from_user.id, '–ñ–¥—É –∫–æ–Ω—Ç–µ–Ω—Ç!', reply_markup=cancel_button)
        await PhotoTransform.PT1.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 1–π —Å—Ç–µ–π—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π


        # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ª—é–±—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫—Ä–æ–º–µ —Ñ–æ—Ç–æ –∏ –¥–æ–∫
        @dp.message_handler(content_types=ContentType.ANY ^ (ContentType.PHOTO | ContentType.DOCUMENT))
        async def unknown_message(message: types.Message):
            await message.reply('–ù–∞–¥–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å ‚ùå –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')


        # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ª—é–±—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫—Ä–æ–º–µ —Ñ–æ—Ç–æ –∏ –¥–æ–∫
        @dp.message_handler(content_types=['text', 'video', 'sticker', 'audio', 'voice', 'unknown'],
                            state=PhotoTransform.PT1)
        async def incorrect_content(message: types.Message):
            await message.reply('–ù–∞–¥–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å ‚ùå –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')


        # –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –¥–µ–π—Å—Ç–≤—É–µ—Ç, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ä–µ–∂–∏–º, –∞ —Ö–æ—Ç–∏–º –¥—Ä—É–≥–æ–π
        @dp.callback_query_handler(text='cancel', state=PhotoTransform.PT1)
        async def cancel(callback_query: types.CallbackQuery, state: FSMContext):
            await callback_query.answer('–†–µ–∂–∏–º CUSTOM –æ—Ç–º–µ–Ω—ë–Ω!‚ùå', show_alert=True)
            await callback_query.message.edit_reply_markup()
            await state.reset_state()  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–µ–π—Ç –ú–° –≤ —Å–ª—É—á–∞–µ –æ—Ç–º–µ–Ω—ã
            await bot.send_message(callback_query.from_user.id, '–ú–µ–Ω—é: /start')


    # –æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ CycleGAN
    else:
        if continuation_mode == '0':
            await bot.answer_callback_query(callback_query.id, text='–†–µ–∂–∏–º Paul C√©zanne –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!‚úÖ', show_alert=True)
        await bot.send_message(callback_query.from_user.id, '–ó–∞–∫–∏–¥—ã–≤–∞–π! –°–µ–π—á–∞—Å —Å–¥–µ–ª–∞—é –≤—Å—ë –ø–æ –∫—Ä–∞—Å–æ—Ç–µ!', reply_markup=cancel_button)
        state = dp.current_state(user=callback_query.from_user.id)
        await state.set_state('GAN mode')


        # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ª—é–±—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫—Ä–æ–º–µ —Ñ–æ—Ç–æ –∏ –¥–æ–∫
        @dp.message_handler(content_types=['text', 'video', 'sticker', 'audio', 'voice', 'unknown'],
                            state='GAN mode')
        async def incorrect_content(message: types.Message):
            await message.reply('–ù–∞–¥–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å ‚ùå –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')


        # –≤ —Å–ª—É—á–∞–µ –æ—Ç–º–µ–Ω—ã CycleGAN
        @dp.callback_query_handler(text='cancel', state='GAN mode')
        async def cancel(callback_query: types.CallbackQuery, state: FSMContext):
            await callback_query.answer('–†–µ–∂–∏–º Paul C√©zanne –æ—Ç–º–µ–Ω—ë–Ω!‚ùå', show_alert=True)
            await callback_query.message.edit_reply_markup()
            await state.reset_state()
            await bot.send_message(callback_query.from_user.id, '–ú–µ–Ω—é: /start')


# –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ / (–Ω–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏)
"""
@dp.message_handler(commands='NST')
async def get_nst(message: types.Message):
    await message.answer('–ñ–¥—É –∫–æ–Ω—Ç–µ–Ω—Ç!', reply_markup=cancel_button)
    await PhotoTransform.PT1.set()

    @dp.callback_query_handler(text='cancel', state=PhotoTransform.PT1)
    async def cancel(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º!‚ùå', show_alert=True)
        await callback_query.message.edit_reply_markup()
        await state.reset_state()
        await bot.send_message(callback_query.from_user.id, '–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–∞ /start')


@dp.message_handler(commands='CycleGAN')
async def get_cyclegan(message: types.Message):
    await message.answer('–ó–∞–∫–∏–¥—ã–≤–∞–π! –°–µ–π—á–∞—Å —Å–¥–µ–ª–∞—é –≤—Å—ë –ø–æ –∫—Ä–∞—Å–æ—Ç–µ', reply_markup=cancel_button)
    state = dp.current_state(user=message.from_user.id)
    await state.set_state('GAN mode')

    @dp.callback_query_handler(text='cancel', state='GAN mode')
    async def cancel(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.answer('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º!‚ùå', show_alert=True)
        await callback_query.message.edit_reply_markup()
        await state.reset_state()
        await bot.send_message(callback_query.from_user.id, '–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–∞ /start')
"""

""" –•–ï–ù–î–õ–ï–†–´ –° –ó–ê–ü–£–°–ö–û–ú –ù–ï–ô–†–û–°–ï–¢–ï–ô"""

# –•–µ–Ω–¥–ª–µ—Ä—ã –ø–æ (1, 2, 3 –Ω–∏–∂–µ) –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@dp.message_handler(content_types=types.ContentTypes.DOCUMENT | types.ContentTypes.PHOTO,
                    state=PhotoTransform.PT1)
async def get_photo_or_doc1(message, state: FSMContext):
    if message.document:  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫
        ref = await message.document.get_url()
    else:
        ref = await message.photo[-1].get_url()


    async with aiohttp.ClientSession() as cs:
        async with cs.get(ref) as reaction:
            img = Image.open(io.BytesIO(await reaction.read()))  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º –ø–æ—Ç–æ–∫–µ


    if img.width * img.height > 256 * 256:  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥ 256*256
        ratio = sqrt(img.width * img.height / (256 * 256))  # c —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        img = img.resize((round(img.width / ratio), round(img.height / ratio)), Image.BICUBIC)


    trans = transforms.ToTensor()
    content_img = trans(img).unsqueeze(0)  # —Ñ–æ—Ç–æ -> —Ç–µ–Ω–∑–æ—Ä [1, 3, 256, 256]
    imsize = (content_img.size(2), content_img.size(3))
    await state.update_data(size=imsize)
    await state.update_data(pic=content_img)
    await message.answer('–¢–µ–ø–µ—Ä—å —Å—Ç–∏–ª—å...', reply_markup=cancel_button)
    await PhotoTransform.next()


    # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ª—é–±—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫—Ä–æ–º–µ —Ñ–æ—Ç–æ –∏ –¥–æ–∫
    @dp.message_handler(content_types=['text', 'video', 'sticker', 'audio', 'voice', 'unknown'],
                        state=PhotoTransform.PT1)
    async def incorrect_content(message: types.Message):
        await message.reply('–ù–∞–¥–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å ‚ùå –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')


    # –•–µ–Ω–¥–ª–µ—Ä –ø–æ–¥ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞" –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å NST –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–ª—è
    @dp.callback_query_handler(text='cancel', state=PhotoTransform.PT2)
    async def cancel(callback_query: types.CallbackQuery, state: FSMContext):
        await callback_query.answer('–†–µ–∂–∏–º CUSTOM –æ—Ç–º–µ–Ω—ë–Ω!‚ùå', show_alert=True)
        await callback_query.message.edit_reply_markup()
        await state.reset_state()
        await bot.send_message(callback_query.from_user.id, '–ú–µ–Ω—é: /start')


@dp.message_handler(content_types=types.ContentTypes.DOCUMENT | types.ContentTypes.PHOTO,
                    state=PhotoTransform.PT2)
async def get_photo_or_doc2(message, state: FSMContext):
    if message.document:
        ref = await message.document.get_url()
    else:
        ref = await message.photo[-1].get_url()


    async with aiohttp.ClientSession() as cs:
        async with cs.get(ref) as reaction:
            img = Image.open(io.BytesIO(await reaction.read()))


    data = await state.get_data()
    content_img = data.get('pic')
    imsize = data.get('size')
    input_img = content_img.clone()

    trans = transforms.Compose([transforms.Resize(imsize),
                                transforms.ToTensor()])
    style_img = trans(img).unsqueeze(0)  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ —Å—Ç–∏–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ñ–æ—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    await waiting(message)  # –æ—Ç–≤–µ—Ç, —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è

    # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é NST
    output = run_style_transfer(cnn, cnn_normalization_mean, cnn_normalization_std,
                               content_img, style_img, input_img, num_steps=200)

    output_1 = output.to('cpu').squeeze().detach()
    pic = transforms.ToPILImage()(output_1)  # –¢–µ–Ω–∑–æ—Ä -> —Ñ–æ—Ç–æ
    await return_nst_image(message, pic, '–í—É–∞–ª—è! —Å–≤–µ—Ä—à–∏–ª–æ—Å—å!ü•≥üéâ\n'
                                     '–ú–µ–Ω—é: /start.')
    await state.finish()  # –û–±–Ω—É–ª–µ–Ω–∏–µ —Å—Ç–æ—Å—Ç–æ—è–Ω–∏–π –ú–°


# –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤ —Å–ª—É—á–∞–µ —Å CycleGAN
@dp.message_handler(content_types=types.ContentTypes.DOCUMENT | types.ContentTypes.PHOTO,
                    state='GAN mode')
async def get_photo_or_doc3(message, state: FSMContext):
    if message.document:
        ref = await message.document.get_url()
    else:
        ref = await message.photo[-1].get_url()


    async with aiohttp.ClientSession() as cs:
        async with cs.get(ref) as reaction:
            img = Image.open(io.BytesIO(await reaction.read()))


    if img.width * img.height > 256 * 256:
        ratio = sqrt(img.width * img.height / (256 * 256))
        img = img.resize((round(img.width / ratio), round(img.height / ratio)), Image.BICUBIC)


    await waiting(message)
    trans = transforms.ToTensor()
    tensor_img = trans(img).unsqueeze(0)
    tensor_img = gen(tensor_img)
    fake_img = 0.5 * (tensor_img.data + 1.0).detach()
    img = transforms.ToPILImage(mode='RGB')(fake_img[0])

    await return_cyclegan_image(message, img, "–í—É–∞–ª—è! –°–≤–µ—Ä—à–∏–ª–æ—Å—å!ü•≥üéâ\n"
                                     "–ú–µ–Ω—é: /start.")
    await state.reset_state()


"""–í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò"""


# –í–æ–∑–≤—Ä–∞—Ç –±–æ—Ç–æ–º –≥–æ—Ç–æ–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –æ—Ç–≤–µ—Ç
async def return_nst_image(message: types.Message, image: Image, text: str):
    bytes = io.BytesIO()
    bytes.name = 'image.jpeg'
    image.save(bytes, 'JPEG')
    bytes.seek(0)
    await message.reply_photo(bytes, caption=text, reply_markup=continue_button1)


async def return_cyclegan_image(message: types.Message, image: Image, text: str):
    bytes = io.BytesIO()
    bytes.name = 'image.jpeg'
    image.save(bytes, 'JPEG')
    bytes.seek(0)
    await message.reply_photo(bytes, caption=text, reply_markup=continue_button2)


# –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
async def waiting(message: types.Message):
    await message.answer("–ü—Ä–æ—Ü–µ—Å—Å –ø–æ—à–µ–ª, –¥–µ–ª–æ –≤—Ä–µ–º–µ–Ω–∏!üïë")


# –û–±—Ä–∞–±–æ—Ç–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –±–æ—Ç—É
@dp.message_handler(content_types=ContentType.ANY)
async def unknown_message(message: types.Message):
    message_text = text("–î—Ä—É–∂–µ, —è –Ω–µ —Ä–æ–∑—É–ºi—é, —â–æ —Ü–µü§∑‚Äç‚ôÇÔ∏è.\n–î–∏–≤–∏—Å—å —Ç—É—Ç ‚û°Ô∏è /info")
    await message.reply(message_text)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp)